version: '3.8'

services:
  # ==============================================================================
  # DATABASE SERVICES
  # ==============================================================================
  
  postgres:
    image: postgres:15-alpine
    container_name: primepass_postgres
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-primepass_db}
      POSTGRES_USER: ${DATABASE_USER:-primepass_user}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-primepass_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployment/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    networks:
      - primepass_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-primepass_user} -d ${DATABASE_NAME:-primepass_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  pgbouncer:
    image: pgbouncer/pgbouncer:latest
    container_name: primepass_pgbouncer
    environment:
      DATABASES_HOST: postgres
      DATABASES_PORT: 5432
      DATABASES_USER: ${DATABASE_USER:-primepass_user}
      DATABASES_PASSWORD: ${DATABASE_PASSWORD:-primepass_password}
      DATABASES_DBNAME: ${DATABASE_NAME:-primepass_db}
      LISTEN_PORT: 5432
      POOL_MODE: transaction
      SERVER_RESET_QUERY: DISCARD ALL
      MAX_CLIENT_CONN: 25
      DEFAULT_POOL_SIZE: 5
      MIN_POOL_SIZE: 0
      RESERVE_POOL_SIZE: 0
      RESERVE_POOL_TIMEOUT: 5
      MAX_DB_CONNECTIONS: 0
      MAX_USER_CONNECTIONS: 0
      SERVER_ROUND_ROBIN: 1
      IGNORE_STARTUP_PARAMETERS: extra_float_digits
      ADMIN_USERS: ${DATABASE_USER:-primepass_user}
      STATS_USERS: ${DATABASE_USER:-primepass_user}
    ports:
      - "${PGBOUNCER_PORT:-6432}:5432"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - primepass_network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: primepass_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - primepass_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # ==============================================================================
  # APPLICATION SERVICES
  # ==============================================================================

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: primepass_backend
    environment:
      - DJANGO_SETTINGS_MODULE=backend.settings.development
      - DATABASE_URL=postgresql://${DATABASE_USER:-primepass_user}:${DATABASE_PASSWORD:-primepass_password}@pgbouncer:5432/${DATABASE_NAME:-primepass_db}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-primepass_redis_dev}@redis:6379/0
      - USE_PGBOUNCER=True
      - DATABASE_HOST=pgbouncer
      - PGBOUNCER_PORT=5432
      - DOCKER_ENV=True
      - DEBUG=True
      - SECRET_KEY=${SECRET_KEY:-your-super-secret-key-change-this-in-production}
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0,backend
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000,http://frontend:3000
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
    volumes:
      - ./backend:/app
      - backend_static:/app/staticfiles
      - backend_media:/app/media
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      pgbouncer:
        condition: service_started
    networks:
      - primepass_network
    command: >
      sh -c "python manage.py collectstatic --noinput &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: .
      dockerfile: ./frontend/Dockerfile
      target: development
    container_name: primepass_frontend
    environment:
      - NODE_ENV=development
      - DOCKER_ENV=true
      - VITE_API_URL=http://localhost:8000
      - VITE_WS_URL=ws://localhost:8000
      - VITE_APP_NAME=PrimePass
      - VITE_APP_VERSION=1.0.0
    volumes:
      - ./frontend:/app
      - ./packages:/packages
      - ./tsconfig.json:/tsconfig.json:ro
      - /app/node_modules
    ports:
      - "3000:3000"
      - "24678:24678"  # HMR port for hot reloading
    depends_on:
      - backend
    networks:
      - primepass_network
    command: npm run dev
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==============================================================================
  # DEVELOPMENT TOOLS
  # ==============================================================================

  mailhog:
    image: mailhog/mailhog:latest
    container_name: primepass_mailhog
    ports:
      - "1025:1025"  # SMTP server
      - "8025:8025"  # Web UI
    networks:
      - primepass_network
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: primepass_nginx
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - backend_static:/var/www/static
      - backend_media:/var/www/media
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - primepass_network
    restart: unless-stopped

# ==============================================================================
# VOLUMES
# ==============================================================================

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_static:
    driver: local
  backend_media:
    driver: local

# ==============================================================================
# NETWORKS
# ==============================================================================

networks:
  primepass_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
